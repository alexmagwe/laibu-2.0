datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    isNew         Boolean    @default(true)
    username      String?
    courseId      String?
    course        Course?    @relation(fields: [courseId], references: [id])
    semester      Int?
    year          Int?
    type          UserType   @default(STUDENT)
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime   @default(now())
    content       Content[]
    moderator     Moderator?
}

model ApprovedEmail {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
}

model Moderator {
    id                String                 @id @default(uuid())
    createdAt         DateTime               @default(now())
    approved          Boolean                @default(false)
    account           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String                 @unique
    unitsModerating   UserModeratingUnit[]
    coursesModerating UserModeratingCourse[]
}

enum UserType {
    STUDENT
    MODERATOR
    ADMIN
}

model Course {
    id         String                 @id @default(uuid())
    users      User[]
    code       String                 @unique
    name       String
    units      Unit[]
    moderators UserModeratingCourse[]
}

model Unit {
    id        String               @id @default(uuid())
    courses   Course[]
    name      String
    code      String               @unique
    year      Int
    type      String               @default("Core")
    semester  Int
    content   Content[]
    moderator UserModeratingUnit[]
}

model UserModeratingCourse {
    id          String     @id @default(uuid())
    userId      String
    start_date  DateTime   @default(now())
    phoneNumber String?
    approved    Boolean    @default(false)
    year        Int?
    uploads     Content[]
    moderator   Moderator? @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
    moderatorId String?
    courseId    String
    course      Course     @relation(fields: [courseId], references: [id])
}

model UserModeratingUnit {
    id          String     @id @default(uuid())
    start_date  DateTime   @default(now())
    year        Int?
    uploads     Content[]
    unitId      String
    unit        Unit       @relation(fields: [unitId], references: [id])
    moderator   Moderator? @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
    moderatorId String
}

model Content {
    id                   String               @id @default(uuid())
    name                 String               @unique
    updatedName          String
    size                 Int?
    uploader             UserModeratingCourse @relation(fields: [uploaderId], references: [id])
    uploaderId           String
    uploadDate           DateTime             @default(now())
    permissions          Permissions          @default(EVERY_ONE)
    unit                 Unit[]
    url                  String               @unique
    type                 ContentVariant       @default(NOTES)
    User                 User?                @relation(fields: [userId], references: [id])
    userId               String?
    userModeratingUnit   UserModeratingUnit?  @relation(fields: [userModeratingUnitId], references: [id])
    userModeratingUnitId String?
}

enum Permissions {
    ONLY_ME
    EVERY_ONE
    COURSE_MEMBERS
}

enum ContentVariant {
    ASSIGNMENT
    CAT
    EXAM
    NOTES
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
