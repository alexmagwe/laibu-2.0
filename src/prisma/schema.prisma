datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    email         String?              @unique
    emailVerified DateTime?
    image         String?
    isNew         Boolean              @default(true)
    username      String?
    uploads       Content[]
    courseId      String?
    course        Course?              @relation(fields: [courseId], references: [id])
    semester      Int?
    year          Int?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime             @default(now())
    moderating    UserModeratingUnit[]
}

model Course {
    id    String @id @default(uuid())
    users User[]
    code  String @unique
    name  String
    units Unit[]
}

model Unit {
    id         String               @id @default(uuid())
    courses    Course[]
    name       String
    code       String               @unique
    year       Int
    type       String               @default("Core")
    semester   Int
    content    Content[]
    moderators UserModeratingUnit[]
}

model UserModeratingUnit {
    id         String   @id @default(uuid())
    userId     String
    start_date DateTime @default(now())
    unitId     String
    user       User     @relation(fields: [userId], references: [id])
    unit       Unit     @relation(fields: [unitId], references: [id])
}

model Content {
    id          String         @id @default(uuid())
    name        String         @unique
    updatedName String
    size        Int?
    uploader    User           @relation(fields: [uploaderId], references: [id])
    uploaderId  String
    uploadDate  DateTime       @default(now())
    permissions Permissions    @default(RESTRICTED)
    unit        Unit[]
    url         String         @unique
    type        ContentVariant @default(Content)
}

enum Permissions {
    HIDDEN
    PUBLIC
    RESTRICTED
}

enum ContentVariant {
    Video
    Assignment
    Content
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
