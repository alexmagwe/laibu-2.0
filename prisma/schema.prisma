generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  courseId      String?
  createdAt     DateTime   @default(now())
  semester      Int?
  username      String?
  year          Int?
  isNew         Boolean    @default(true)
  type          UserType   @default(STUDENT)
  accounts      Account[]
  content       Content[]
  moderator     Moderator?
  sessions      Session[]
  course        Course?    @relation(fields: [courseId], references: [id])
}

model ApprovedEmail {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Moderator {
  id                String                 @id @default(uuid())
  createdAt         DateTime               @default(now())
  approved          Boolean                @default(false)
  userId            String                 @unique
  account           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  coursesModerating UserModeratingCourse[]
  unitsModerating   UserModeratingUnit[]
}

model Course {
  id         String                 @id @default(uuid())
  code       String                 @unique
  name       String
  users      User[]
  moderators UserModeratingCourse[]
  units      Unit[]                 @relation("CourseToUnit")
}

model Unit {
  id        String               @id @default(uuid())
  name      String
  code      String               @unique
  year      Int
  semester  Int
  type      String               @default("Core")
  moderator UserModeratingUnit[]
  content   Content[]            @relation("ContentToUnit")
  courses   Course[]             @relation("CourseToUnit")
}

model UserModeratingCourse {
  id          String     @id @default(uuid())
  userId      String
  start_date  DateTime   @default(now())
  phoneNumber String?
  year        Int?
  courseId    String
  approved    Boolean    @default(false)
  moderatorId String?
  course      Course     @relation(fields: [courseId], references: [id])
  moderator   Moderator? @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
}

model UserModeratingUnit {
  id          String    @id @default(uuid())
  start_date  DateTime  @default(now())
  year        Int?
  unitId      String
  moderatorId String
  moderator   Moderator @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  unit        Unit      @relation(fields: [unitId], references: [id])
}

model Content {
  id          String         @id @default(uuid())
  name        String         @unique
  updatedName String?
  size        Int?
  uploadDate  DateTime       @default(now())
  url         String         @unique
  type        ContentVariant @default(NOTES)
  permissions Permissions    @default(EVERY_ONE)
  ownerId     String?
  owner       User?          @relation(fields: [ownerId], references: [id])
  unit        Unit[]         @relation("ContentToUnit")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  STUDENT
  MODERATOR
  ADMIN
}

enum Permissions {
  ONLY_ME
  EVERY_ONE
  COURSE_MEMBERS
}

enum ContentVariant {
  ASSIGNMENT
  CAT
  EXAM
  NOTES
}
